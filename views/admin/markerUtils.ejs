<script>

function isCloseEnough(center, pos) {
    return pos.lng > center.lng-NORMALRANGE &&
        pos.lng < center.lng+NORMALRANGE &&
        pos.lat > center.lat-NORMALRANGE &&
        pos.lat < center.lat+NORMALRANGE
}

function sortMarker() {
    container = getContainer(MARKERS);
    container.sort(customSortMarkerTitle());
    mapContainer2Type(MARKERS, container);
}

function customSortMarkerTitle() {
    return function(a, b) {
        var len = Math.min(a.title.length, b.title.length) 
        for (let i=0; i < len; i++) {
            if(a.title[i] > b.title[i])
                return 1;
            else if(a.title[i] < b.title[i])
                return -1;
        }
        if (a.title.length < b.title.length)
            return 1;
        else
            return -1;
    }
    
}

function placeMarker(pos, data, type, size) {
    const strTitle = data.hasOwnProperty("name") ? 
        data["name"] : CLICKTITLE;
    const strSnippet = data.hasOwnProperty("address") ? 
        data["address"] + decorateSnippet(data) : CLICKSNIPPET;
    const strType = data.hasOwnProperty("type") ? 
        data["type"] : CLICKTYPE;

    const marker = new google.maps.Marker({
        title: strTitle,
        snippet: strSnippet,
        position: pos, 
        map: map,
        icon: new google.maps.MarkerImage(
                getMarkerIconPath(strType), 
                null, 
                null, 
                null, 
                new google.maps.Size(size, size) 
            ),
    });

    markerContainer = getContainer(type);
    markerContainer.push(marker);
    mapContainer2Type(type, markerContainer)
}

function decorateSnippet(data) {
    var res = "";
    const dayIndex = (new Date().getDay() + 6) % 7;
    const strParking = data["parking"];
    const strRemark = data["other"];

    if (data["time"].length == 1)
        res += '<br>' + data["time"][0];
    else {
        res += '<br>' + data["time"][dayIndex];
        res  = res.replace('N', '不開放')
    }
        
    if (strParking == "O")
        res += '<br>' + '附帶停車場';
    else if (strParking == "X")
        res += '<br>' + '無停車場';

    if (strRemark.length > 0)
        res += "<br>" + strRemark.toString();

    return res;
}

function setMarkerIcon(type, size) {
    container = getContainer(type);
    for (let i = 0; i < container.length; i++) {
        container[i].setIcon(
            new google.maps.MarkerImage(
                container[i].getIcon().url, //marker's same icon graphic
                null, //size
                null, //origin
                null, //anchor
                new google.maps.Size(size, size) //changes the scale
            )
        );
    }
    mapContainer2Type(type, container);
}

function getMarkerIconSize() {
    var zoom = map.getZoom();
    var zoomSize = iconSizeZoom0 * (1 + 0.2 * (zoom - lastZoom));
    zoomSize = Math.max(iconSizeZoom0, zoomSize);
    return zoomSize;
}

function getMarkerIconPath(type) {
    if (type.length == 0)
    return IMAGEFOLDER + 'PeeLACE_TYPE000.png';

    switch(type) {
        case "咖啡廳":
            return IMAGEFOLDER + 'PeeLACE_TYPE004.png';
        case "速食店":
            return IMAGEFOLDER + 'PeeLACE_TYPE002.png';
        case "交通建設":
            return IMAGEFOLDER + 'PeeLACE_TYPE001.png';
        case "政府機關":
            return IMAGEFOLDER + 'PeeLACE_TYPE008.png';   
        case "加油站":
            return IMAGEFOLDER + 'PeeLACE_TYPE006.png';
        case "商店":
            return IMAGEFOLDER + 'PeeLACE_TYPE003.png';
        case "便利商店":
            return IMAGEFOLDER + 'PeeLACE_TYPE005.png';
        case "戶外":
            return IMAGEFOLDER + 'PeeLACE_TYPE007.png';
        default:
            return IMAGEFOLDER + 'PeeLACE_TYPE999.png';
    }
}

function setWindowInfo() {
    for (let i=0; i<markers.length; i++) {
        var markerWindow = new google.maps.InfoWindow({
            content: getMarkerWindowInfo(markers[i]),
        });
        
        markerWindowinfos.push(markerWindow)

        markers[i].addListener("click", () => {
            closeOtherWindow();
            setCenterIndex(i);
      
            markerWindowinfos[i].open({
                anchor: markers[i],
                map,
                shouldFocus: false,
            });
        });
    }
}

function getMarkerWindowInfo(marker) {
    var reportParam = "", type;
    if(marker.title == CLICKTITLE) {
        reportParam = marker.position;
        css = 'clickwindow'; 
        type = USERCLICK;
    } else {
        reportParam = marker.title;
        css = 'markerwindow'
        type = ORIGIN;
    }
    
    const composeParam = createComposeParam(marker.position, type, marker.title);
    const contentString = 
        "<div class=" + css + ">" +
        "<h1>" + marker.title + "</h1>" + 
        "<h3>" + marker.snippet + "</h3>" +
        ((marker.title != CLICKTITLE) ?
        '<div class="tooltip"><button onclick="markerNevigation(\''+marker.position+ '\')" class="btn"><i class="fas fa-route"></i><span class="tooltiptext">導航至此</span></button></div>' : '') +
        '<div class="tooltip"><button onclick="newSearchCenter(\''+composeParam+ '\')" class="btn"><i class="far fa-dot-circle"></i><span class="tooltiptext">搜尋此處</span></button></div>' +
        '<div class="tooltip"><button onclick="reportMarker(\''+ reportParam + '\')" class="btn"><i class="fas fa-bug"></i><span class="tooltiptext">地點錯誤回報</span></button></div>' +
        '</div>'
        ;   
    return contentString;
}

function createComposeParam(pos, type, title) {
    return pos.toString() + '/' + type.toString() + '/' + title.toString();
}

</script>