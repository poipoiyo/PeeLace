<script>

function aim2Map(zoomSize, center) {
    map.setZoom(zoomSize);
    map.setCenter(center);
}

function setMapOnAll(type, bMap) {
    container = getContainer(type)
    for (let i = 0; i < container.length; i++) {
        if(bMap)
            container[i].setMap(map);
        else
            container[i].setMap(null);
    }
}

function showMarkers(type) {
    isMarkerHide = false;
    setMapOnAll(type, true);
}

function hideMarkers(type) {
    isMarkerHide = true;
    setMapOnAll(type, false);
}

function clearMap() {
    removeMarker(USERMARKER)
    removeMarker(CLICKMARKER)
    removeMarker(MARKERS)

    clearArray(MARKERWINDOWINFOS)
    clearArray(CLICKWINDOWINFO)
    clearArray(MARKERTYPE)
}

function removeMarker(type) {
    setMapOnAll(type, false);
    mapContainer2Type(type, [])
}

function setUserCenterPos(pos, type) {
    if(type == USERLOCATION) {
        centerUserLatlng = pos;
        return true;
    } else if(type == USERCLICK) {
        centerClickLatlng = pos;
        return true;
    }
    return false;
}

function setCenterIndex(ind) {
    centerIndex = ind;
    return true;
}

function getUserCenterPos() {
    if(lastCenterType == USERLOCATION) {
        return centerUserLatlng;
    } else if(lastCenterType == USERCLICK) {
        return centerClickLatlng;
    }
    return false;
}

function getCenterIndex() {
    return centerIndex;
}

function setUserCenterType(type) {
    lastCenterType = type
}

function closeOtherWindow() {
    var ind = getCenterIndex();
    
    if(ind > CENTERISBYUSER && markerWindowinfos[ind])
        markerWindowinfos[ind].close();
    
    if(clickWindowInfo.length > 0 && clickWindowInfo[0])
        clickWindowInfo[0].close();
}

function isInboundary(dLat, dLng) {
    const res = 
        dLat <= TAIWAN_BOUNDS.north && 
        dLat >= TAIWAN_BOUNDS.south &&
        dLng >= TAIWAN_BOUNDS.west &&
        dLng <= TAIWAN_BOUNDS.east
    return res
}

function isLegalPosition(lat, lng) {
    res = false
    const dLat = Number(lat)
    if ( dLat != "NaN" && Number(lng) != "NaN") {
        const dLng = 0 - Number(lng); // default longitude is negative
        if ( isInboundary(dLat, dLng) ) {
            res = true;
        }
    }
    return res;
}

</script>