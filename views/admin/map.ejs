<script> 
    
    let map, errorWindow;
    
    // container type :
    const MARKERS = 1, CLICKMARKER = 2, USERMARKER = 3 ;
    const MARKERWINDOWINFOS = 4, CLICKWINDOWINFO = 5, MARKERTYPE = 6;

    const CLICKTITLE = "User Click"

    let markers = [], clickMarker = [], userMarker = [];
    let markerWindowinfos = [], clickWindowInfo = [];
    let markerType = [];

    const initLatlng = { lat: 23.50, lng: 120.98 };
    var mapCenterPos = initLatlng;

    var centerLatlng = initLatlng;
    var centerIndex = -1;

    const normalZoom = 8;
    const closerZoom = 16;
    const normalRange = 0.01;

    var isMarkerHide = false;
    var lastZoom = normalZoom;
    const iconSizeZoom0 = 24;

function initMap() {
    map = new google.maps.Map(document.getElementById("map"), {
        zoom: normalZoom,
        center: initLatlng,
        styles: [
            { visibility: "off" },
            { elementType: "geometry", stylers: [{ color: "#242f3e" }] },
            { elementType: "labels.text.stroke", stylers: [{ color: "#242f3e" }] },
            { elementType: "labels.text.fill", stylers: [{ color: "#746855" }] },
            { featureType: "administrative.locality", elementType: "labels.text.fill", stylers: [{ color: "#d59563" }], },
            { featureType: "poi", elementType: "labels.text.fill", stylers: [{ color: "#d59563" }], },
            { featureType: "poi.park", elementType: "geometry", stylers: [{ color: "#263c3f" }], },
            { featureType: "poi.park", elementType: "labels.text.fill", stylers: [{ color: "#6b9a76" }], },
            { featureType: "road", elementType: "geometry", stylers: [{ color: "#38414e" }], },
            { featureType: "road", elementType: "geometry.stroke", stylers: [{ color: "#212a37" }], },
            { featureType: "road", elementType: "labels.text.fill", stylers: [{ color: "#9ca5b3" }], },
            { featureType: "road.highway", elementType: "geometry", stylers: [{ color: "#746855" }], },
            { featureType: "road.highway", elementType: "geometry.stroke", stylers: [{ color: "#1f2835" }], },
            { featureType: "road.highway", elementType: "labels.text.fill", stylers: [{ color: "#f3d19c" }], },
            { featureType: "transit", elementType: "geometry", stylers: [{ color: "#2f3948" }], },
            { featureType: "transit.station", elementType: "labels.text.fill", stylers: [{ color: "#d59563" }], },
            { featureType: "water", elementType: "geometry", stylers: [{ color: "#17263c" }], },
            { featureType: "water", elementType: "labels.text.fill", stylers: [{ color: "#515c6d" }], },
            { featureType: "water", elementType: "labels.text.stroke", stylers: [{ color: "#17263c" }], },
        ],
    });
    
    const locationButton = document.createElement("button");
    locationButton.setAttribute('class', 'btn btn-primary');
    //var icon = document.createElement("span");
    //icon.className ="glyphicon glyphicon-user";
    //locationButton.appendChild(icon);

    locationButton.textContent = "My Location";
    locationButton.classList.add("custom-map-control-button");
    map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(locationButton);
    locationButton.addEventListener("click", () => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position) => {
                clearMap()

                const pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                };

                aim2Map(closerZoom, pos);
                setUserCenterPos(pos, -1);
                placeMarker(pos, [], USERMARKER, getMarkerIconSize())

                readDataFromFirestore(pos)
            });
        } else {
            handleError("getCurrentPosition", 
                "Browser doesn't support geolocation.", 
                errorWindow);
        }
    });

    const filterButton = document.createElement("button");
    
    filterButton.setAttribute('class', 'btn btn-primary');
    filterButton.textContent = "Filter";
    map.controls[google.maps.ControlPosition.LEFT_TOP].push(filterButton);

    filterButton.addEventListener("click", () => {
        var markerFilter = document.getElementById('filter') 
        if (markerFilter.style.display=='none') {
            markerFilter.style.display=''
        } 
        else {
            markerFilter.style.display='none'
        }
    });

    google.maps.event.addListener(map, 'click', function(event) {
        removeMarker(CLICKMARKER);
        clearArray(CLICKWINDOWINFO);
        closeOtherWindow();

        placeMarker(event.latLng, [], CLICKMARKER, getMarkerIconSize());

        var markerWindow = new google.maps.InfoWindow({
            content: getMarkerWindowInfo(clickMarker[0]),
        });
        clickWindowInfo.push(markerWindow);
        clickWindowInfo[0].open({
                anchor: clickMarker[0],
                map,
                shouldFocus: false,
            });

        clickMarker[0].addListener("click", () => {
            closeOtherWindow();
            const markerPos = clickMarker[0].position;
            setUserCenterPos(markerPos, centerIndex);

            clickWindowInfo[0].open({
                anchor: clickMarker[0],
                map,
                shouldFocus: false,
            });
        });

    });

    google.maps.event.addListener(map, 'zoom_changed', function() {
        if (!isMarkerHide && map.getZoom() < 14)
            hideMarkers(MARKERS)
        if(isMarkerHide && map.getZoom() > 14)
            showMarkers(MARKERS);

        setMarkerIcon(MARKERS, getMarkerIconSize())       
        setMarkerIcon(USERMARKER, getMarkerIconSize()) 
        setMarkerIcon(CLICKMARKER, getMarkerIconSize()) 
    });

    google.maps.event.addListener(map, "center_changed", function() {
        mapCenterPos = {
            lat: map.getCenter().lat(),
            lng: map.getCenter().lng(),
        } 
    });

    google.maps.event.addDomListener(
        document.getElementById("map"), 'load', initMap
    );
}

function readDataFromFirestore(center) {
    const lesserGeopoint = new firebase.firestore.GeoPoint(
        center.lat-normalRange, 
        center.lng-normalRange,
    );
    const greaterGeopoint = new firebase.firestore.GeoPoint(
        center.lat+normalRange, 
        center.lng+normalRange,
    );
    
    removeOldMarkerList();

    db.collection("PL_Marker_DB")
    .where('location', '>', lesserGeopoint)
    .where('location', '<', greaterGeopoint)
    .get()
    .then((querySnapshot) => {
        querySnapshot.forEach((doc) => {
            const pos = {
                lat: doc.data()["location"]._lat,
                lng: doc.data()["location"]._long,
            };
            if (pos.lng > center.lng-normalRange &&
                pos.lng < center.lng+normalRange) {
                placeMarker(pos, doc.data(), MARKERS, getMarkerIconSize())
            }
        });
        sortMarker();
        setWindowInfo(MARKERS, MARKERWINDOWINFOS)
        addMarker2Filter()
    })
    .catch((error) => {
        handleError("readDataFromFirestore", 
                    "The Database service failed.", 
                    errorWindow);
    });
}

</script>