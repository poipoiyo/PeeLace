<script> 

function initMap() {
    map = new google.maps.Map(document.getElementById("map"), {
        zoom: NORMALZOOM,
        center: initLatlng,
        clickableIcons: false,
        restriction: {
            latLngBounds: TAIWAN_BOUNDS,
            strictBounds: false,
        },
        styles: DARKMODE,
    });
    directionsService   = new google.maps.DirectionsService();
    directionsRenderer  = new google.maps.DirectionsRenderer({
        suppressMarkers: true
    });
    directionsRenderer.setMap(map);

    // user location
    const locationButton = document.createElement("button");
    locationButton.setAttribute('class', 'btn btn-primary');
    locationButton.innerHTML = '<i class="fas fa-location-arrow"></i>';
    locationButton.classList.add("custom-map-control-button");
    map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(locationButton);
    locationButton.addEventListener("click", () => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position) => {
                const pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                };
                redirectUrl(pos.lat + "," + pos.lng);
            });
        } else {
            handleError("getCurrentPosition", "Browser doesn't support geolocation.");
        }
    });

    // filter
    const filterButton = document.createElement("button");
    filterButton.setAttribute('class', 'btn btn-primary');
    filterButton.innerHTML = '<i class="fas fa-chevron-right"></i>';
    map.controls[google.maps.ControlPosition.LEFT_TOP].push(filterButton);
    filterButton.addEventListener("click", () => {
        var markerFilter = document.getElementById('filterDiv')
        if (markerFilter.style.display=='none') {
            markerFilter.style.display=''
            filterButton.innerHTML = '<i class="fas fa-chevron-left"></i>';
        } 
        else {
            markerFilter.style.display='none'
            filterButton.innerHTML = '<i class="fas fa-chevron-right"></i>';
        }
    });

    google.maps.event.addListener(map, 'click', function(event) {
        removeMarker(CLICKMARKER);
        clearArray(CLICKWINDOWINFO);
        closeOtherWindow();

        placeMarker(event.latLng, [], CLICKMARKER, getMarkerIconSize());

        setUserCenterPos(event.latLng, USERCLICK);
        setCenterIndex(CENTERISBYUSER);

        clickWindowInfoAction(); 
    });

    google.maps.event.addListener(map, 'zoom_changed', function() {
        if (!isMarkerHide && map.getZoom() < NOMARKERZOOM)
            hideMarkers(MARKERS)
        if (isMarkerHide && map.getZoom() > NOMARKERZOOM)
            showMarkers(MARKERS);

        setMarkerIcon(MARKERS, getMarkerIconSize())       
        setMarkerIcon(USERMARKER, getMarkerIconSize()) 
        setMarkerIcon(CLICKMARKER, getMarkerIconSize()) 
    });

    google.maps.event.addListener(map, "center_changed", function() {
        mapCenterPos = {
            lat: map.getCenter().lat(),
            lng: map.getCenter().lng(),
        } 
    });

    google.maps.event.addDomListener(
        document.getElementById("map"), 'load', initMap
    );

    // init location
    var userLat = document.getElementById('user_lat').dataset.lat
    var userLng = document.getElementById('user_lng').dataset.lng
    initByUserLatlng(userLat, userLng)
}

function initByUserLatlng(lat, lng) {
    if(isLegalPosition(lat, lng)) {
        const pos = {
            lat: Number(lat),
            lng: 0 - Number(lng),
        };  
        startServiceByUserLocation(pos)   
    }
}

function startServiceByUserLocation(pos) {
    clearMap()
    aim2Map(CLOSERZOOM, pos);
    setUserCenterPos(pos, USERLOCATION);
    setCenterIndex(CENTERISBYUSER);
    setUserCenterType(USERLOCATION);

    placeMarker(pos, [], USERMARKER, getMarkerIconSize())

    readDataFromFirestore(pos)
}

function readDataFromFirestore(center) {
    removeOldMarkerList();

    db.collection("PL_Marker_DB")
    .get()
    .then((querySnapshot) => {
        querySnapshot.forEach((doc) => {
            const pos = {
                lat: Number(doc.data()["latitude"]),
                lng: Number(doc.data()["longitude"]),
            };
            if (isCloseEnough(center, pos)) {
                placeMarker(pos, doc.data(), MARKERS, getMarkerIconSize())
            }
        });
        sortMarker();
        setWindowInfo();
        addMarker2Filter();
        openSameWindowInfo();
    })
    .catch((error) => {
        handleError("readDataFromFirestore", error);
    });
}

function clickWindowInfoAction() {
    var markerWindow = new google.maps.InfoWindow({
        content: getMarkerWindowInfo(clickMarker[0]),
    });
    clickWindowInfo.push(markerWindow);
    clickWindowInfo[0].open({
        anchor: clickMarker[0],
        map,
        shouldFocus: false,
    });

    clickMarker[0].addListener("click", () => {
        closeOtherWindow();
        setUserCenterType(USERCLICK);
            
        clickWindowInfo[0].open({
            anchor: clickMarker[0],
            map,
            shouldFocus: false,
        });
    });
}

function redirectUrl(strAppend) {
    var currentUrl = window.location.href;
    const baseUrl = currentUrl.split(MAPURL)[0];
    window.location.replace(baseUrl + MAPURL + "/" + strAppend);
}
</script>